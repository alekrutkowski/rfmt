#  Copyright 2015 Google Inc. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

"""Test data for rfmt tool (c.f. rfmt_test.py)."""

UNFORMATTED_SRC = ('samples <- MCMC2({\n'
                   '    mu.mu.beta.01 <- coef(mle.01) # Hyperparameter'
                   's\n'
                   '    sigma.mu.beta.01 <- 5 * abs(coef(mle.01))\n'
                   '    mu.mu.beta.11 <- coef(mle.11)\n'
                   '    sigma.mu.beta.11 <- 5 * abs(coef(mle.11))\n'
                   '\n'
                   '    # Parent-level parameters\n'
                   '    beta.01 <- matrix(runif(length(i.p.01) * m), l'
                   'ength(i.p.01), m, dimnames = list(names(i.p.01), N'
                   'ULL))\n'
                   '    beta.11 <- matrix(runif(length(i.p.11) * m), l'
                   'ength(i.p.11), m, dimnames = list(names(i.p.11), N'
                   'ULL))\n'
                   '  }, {\n'
                   '    # Sample parent-level variates\n'
                   '    for (p in ps) {\n'
                   '      i.01 <- i.p.01[[p]]\n'
                   '      if (length(i.01)) {\n'
                   '        x.tn.01.p <- x.tn.01[i.01, , drop = FALSE]'
                   '\n'
                   '        mu.01 <- drop(x.tn.01.p %*% beta.01[p, ])\n'
                   '        pbt.01 <- rtnorm(length(i.01), mu.01, 1, l'
                   'o = pbt.01.lo[i.01], hi = pbt.01.hi[i.01])\n'
                   '        beta.01[p, ] <- SampleLRPosteriorCoefficie'
                   'nts(pbt.01, x.tn.01.p, 1, mu.beta.01, sigma.beta.0'
                   '1)\n'
                   '      }\n'
                   '      i.11 <- i.p.11[[p]]\n'
                   '      if (length(i.11)) {\n'
                   '        x.tn.11.p <- x.tn.11[i.11, , drop = FALSE]'
                   '\n'
                   '        mu.11 <- drop(x.tn.11.p %*% beta.11[p, ])\n'
                   '        pbt.11 <- rtnorm(length(i.11), mu.11, 1, l'
                   'o = pbt.11.lo[i.11], hi = pbt.11.hi[i.11])\n'
                   '        beta.11[p, ] <- SampleLRPosteriorCoefficie'
                   'nts(pbt.11, x.tn.11.p, 1, mu.beta.11, sigma.beta.1'
                   '1)\n'
                   '      }\n'
                   '    }\n'
                   '\n'
                   '    # Sample population hyperparameters; no correl'
                   'ations at present\n'
                   '    for (i in 1:m) {\n'
                   '      mu.beta.01[i] <- SampleNormalPosteriorMean(b'
                   'eta.01[, i], sigma.beta.01[i], mu.mu.beta.01, sigm'
                   'a.mu.beta.01)\n'
                   '      sigma.beta.01[i] <- SampleNormalPosteriorSD('
                   'beta.01[, i], mu.beta.01[i], .1, 5 * max(sigma.mu.'
                   'beta.01))\n'
                   '      mu.beta.11[i] <- SampleNormalPosteriorMean(b'
                   'eta.11[, i], sigma.beta.11[i], mu.mu.beta.11, sigm'
                   'a.mu.beta.11)\n'
                   '      sigma.beta.11[i] <- SampleNormalPosteriorSD('
                   'beta.11[, i], mu.beta.11[i], .1, 5 * max(sigma.mu.'
                   'beta.11))\n'
                   '    }\n'
                   '\n'
                   '    list(beta.01 = beta.01, beta.11 = beta.11,\n'
                   '      mu.beta.01 = mu.beta.01, sigma.beta.01 = sig'
                   'ma.beta.01,\n'
                   '      mu.beta.11 = mu.beta.11, sigma.beta.11 = sig'
                   'ma.beta.11)\n'
                   '  },\n'
                   '  n.samples = 7000,\n'
                   '  thin = 3\n'
                   ')\n'
                   '\n')

FORMATTED_SRC = ('samples <- MCMC2(\n'
                 '    {\n'
                 '      mu.mu.beta.01 <- coef(mle.01)  # Hyperparame'
                 'ters\n'
                 '      sigma.mu.beta.01 <- 5 * abs(coef(mle.01))\n'
                 '      mu.mu.beta.11 <- coef(mle.11)\n'
                 '      sigma.mu.beta.11 <- 5 * abs(coef(mle.11))\n'
                 '\n'
                 '      # Parent-level parameters\n'
                 '      beta.01 <- matrix(runif(length(i.p.01) * m),'
                 ' length(i.p.01), m,\n'
                 '                        dimnames = list(names(i.p.'
                 '01), NULL))\n'
                 '      beta.11 <- matrix(runif(length(i.p.11) * m),'
                 ' length(i.p.11), m,\n'
                 '                        dimnames = list(names(i.p.'
                 '11), NULL))\n'
                 '    },\n'
                 '    {\n'
                 '      # Sample parent-level variates\n'
                 '      for (p in ps) {\n'
                 '        i.01 <- i.p.01[[p]]\n'
                 '        if (length(i.01)) {\n'
                 '          x.tn.01.p <- x.tn.01[i.01, , drop = FALS'
                 'E]\n'
                 '          mu.01 <- drop(x.tn.01.p %*% beta.01[p, ]'
                 ')\n'
                 '          pbt.01 <- rtnorm(length(i.01), mu.01, 1,'
                 ' lo = pbt.01.lo[i.01],\n'
                 '                           hi = pbt.01.hi[i.01])\n'
                 '          beta.01[p, ] <- SampleLRPosteriorCoeffic'
                 'ients(\n'
                 '              pbt.01, x.tn.01.p, 1, mu.beta.01, si'
                 'gma.beta.01)\n'
                 '        }\n'
                 '        i.11 <- i.p.11[[p]]\n'
                 '        if (length(i.11)) {\n'
                 '          x.tn.11.p <- x.tn.11[i.11, , drop = FALS'
                 'E]\n'
                 '          mu.11 <- drop(x.tn.11.p %*% beta.11[p, ]'
                 ')\n'
                 '          pbt.11 <- rtnorm(length(i.11), mu.11, 1,'
                 ' lo = pbt.11.lo[i.11],\n'
                 '                           hi = pbt.11.hi[i.11])\n'
                 '          beta.11[p, ] <- SampleLRPosteriorCoeffic'
                 'ients(\n'
                 '              pbt.11, x.tn.11.p, 1, mu.beta.11, si'
                 'gma.beta.11)\n'
                 '        }\n'
                 '      }\n'
                 '\n'
                 '      # Sample population hyperparameters; no corr'
                 'elations at present\n'
                 '      for (i in 1:m) {\n'
                 '        mu.beta.01[i] <- SampleNormalPosteriorMean'
                 '(\n'
                 '            beta.01[, i], sigma.beta.01[i], mu.mu.'
                 'beta.01, sigma.mu.beta.01)\n'
                 '        sigma.beta.01[i] <- SampleNormalPosteriorS'
                 'D(\n'
                 '            beta.01[, i], mu.beta.01[i], .1, 5 * m'
                 'ax(sigma.mu.beta.01))\n'
                 '        mu.beta.11[i] <- SampleNormalPosteriorMean'
                 '(\n'
                 '            beta.11[, i], sigma.beta.11[i], mu.mu.'
                 'beta.11, sigma.mu.beta.11)\n'
                 '        sigma.beta.11[i] <- SampleNormalPosteriorS'
                 'D(\n'
                 '            beta.11[, i], mu.beta.11[i], .1, 5 * m'
                 'ax(sigma.mu.beta.11))\n'
                 '      }\n'
                 '\n'
                 '      list(beta.01 = beta.01, beta.11 = beta.11, m'
                 'u.beta.01 = mu.beta.01,\n'
                 '           sigma.beta.01 = sigma.beta.01, mu.beta.'
                 '11 = mu.beta.11,\n'
                 '           sigma.beta.11 = sigma.beta.11)\n'
                 '    },\n'
                 '    n.samples = 7000,\n'
                 '    thin = 3)\n')
